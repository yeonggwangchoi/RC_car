#include <mega128.h>
#include <delay.h>
#include <stdio.h>

unsigned int dis_wall;
unsigned char count=0;
unsigned char msec=0;
unsigned char sec;
int distance;
unsigned char rx_data;

// External Interrupt 4 service routine
interrupt [EXT_INT4] void ext_int4_isr(void)
{
    TCCR0 = 0x00;
    distance=dis_wall*0.170;
    distance=distance-4;
    
    if(distance<20)
    {
        PORTB.0=0;
        PORTB.1=1;
        PORTB.2=1;
        PORTB.3=0;
                
        OCR1AL=0xFF;
        OCR1BL=0xFF;
    
        delay_ms(300);
    }        
    
    dis_wall=0;
}

// External Interrupt 5 service routine
interrupt [EXT_INT5] void ext_int5_isr(void)
{
    TCCR0=0x06;
    TCNT0=0x83;
    PORTE.5=0x01;        
}

// External Interrupt 6 service routine
interrupt [EXT_INT6] void ext_int6_isr(void)
{
    count=0;
    msec=0;
    sec=0;
    
    TCCR0=0x00;
    TCNT0=0x00;
    PORTE.6=0x01;
    
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
    dis_wall++;
    TCNT0=256-45;
}

// Timer2 overflow interrupt service routine
interrupt [TIM2_OVF] void timer2_ovf_isr(void)
{
    
    count++;
    if(count==5)
    {
        count=0;
        msec++;
    }
    if(msec==100)
    {
        msec=0;
        sec++;
    }
    TCNT0=0x83;
}

void main(void)
{
unsigned char remember=0;

DDRE=0x80;
PORTE=0x7F;
PORTB=0x00;
DDRB=0xFF;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 16000.000 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 0.016 ms
ASSR=0<<AS0;
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
TCNT0=256-45;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 16000.000 kHz
// Mode: Ph. correct PWM top=0x00FF
// OC1A output: Non-Inverted PWM
// OC1B output: Non-Inverted PWM
// OC1C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 0.031875 ms
// Output Pulse(s):
// OC1A Period: 0.031875 ms Width: 0 us
// OC1B Period: 0.031875 ms Width: 0 us
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (1<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1CH=0x00;
OCR1CL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: 16000.000 kHz
// Mode: Normal top=0xFF
// OC2 output: Disconnected
// Timer Period: 0.016 ms
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
// INT3: Off
// INT4: On
// INT4 Mode: Falling Edge
// INT5: On
// INT5 Mode: Falling Edge
// INT6: On
// INT6 Mode: Falling Edge
// INT7: Off
EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
EICRB=(0<<ISC71) | (0<<ISC70) | (1<<ISC61) | (0<<ISC60) | (1<<ISC51) | (0<<ISC50) | (1<<ISC41) | (0<<ISC40);
EIMSK=(0<<INT7) | (1<<INT6) | (1<<INT5) | (1<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
EIFR=(0<<INTF7) | (1<<INTF6) | (1<<INTF5) | (1<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (0<<INTF0);

// USART0 initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
UCSR0B=0x18;
UCSR0C=0x06;
UBRR0H=0x00;
UBRR0L=0x67;

// Globally enable interrupts
#asm("sei")

while (1)
      {
          rx_data=getchar();
          
          if(remember!=rx_data)
          {
            PORTE.6=0x00;
            remember=0;    
          }
          if(sec==0)
          {
            PORTE.5=0x00;
          }
          switch(rx_data)
          {
            case 'S':
                remember='S';
                PORTB.0=0;
                PORTB.1=0;
                PORTB.2=0;
                PORTB.3=0;
                
                OCR1AL=0x00;
                OCR1BL=0x00;
            break;
            
            case 'G':
                remember='G';
                if(sec<=1)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0xFF;
                    OCR1BL=0xFF;
                }
                else if(sec>=2)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0xFF;
                    OCR1BL=0xFF;
                }

            break;
            
            case 'L':
                remember='L';
                if(sec<=1)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0x5F;
                    OCR1BL=0xFF;
                }
                else if(sec>=2)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0x00;
                    OCR1BL=0xFF;
                }

            break;
            
            case 'R':
                remember='R';
                if(sec<=1)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0xFF;
                    OCR1BL=0x5F;
                }
                else if(sec>=2)
                {
                    PORTB.0=1;
                    PORTB.1=0;
                    PORTB.2=0;
                    PORTB.3=1;
                
                    OCR1AL=0xFF;
                    OCR1BL=0x00;
                }

            break;
            
            case 'B':
                remember='B';
                if(sec<=1)
                {
                    PORTB.0=0;
                    PORTB.1=1;
                    PORTB.2=1;
                    PORTB.3=0;
                
                    OCR1AL=0xFF;
                    OCR1BL=0xFF;
                }
                else if(sec>=2)
                {
                    PORTB.0=0;
                    PORTB.1=1;
                    PORTB.2=1;
                    PORTB.3=0;
                
                    OCR1AL=0xFF;
                    OCR1BL=0xFF;
                }

            break;
            
            case 'l':
                remember='l';
                
                PORTB.0=0;
                PORTB.1=1;
                PORTB.2=1;
                PORTB.3=0;
                
                OCR1AL=0x00;
                OCR1BL=0xFF;

            break;
            
            case 'r':
                remember='r';
                
                PORTB.0=0;
                PORTB.1=1;
                PORTB.2=1;
                PORTB.3=0;
                
                OCR1AL=0xFF;
                OCR1BL=0x00;

            break;
            
              
          }


      }
}