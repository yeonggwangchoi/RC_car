#include <mega128.h>
#include <mega128.h>
#include <delay.h>
#include <stdio.h>

unsigned int dis_wall;
int distance;
unsigned char rx_data;


// External Interrupt 4 service routine
interrupt [EXT_INT4] void ext_int4_isr(void)
{
    TCCR0=0x00;
    distance=dis_wall*0.017;
    distance=distance-20;
    dis_wall=0;
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
    dis_wall++;
    TCNT0=256-2;

}

void main(void)
{
DDRE=0x80;
PORTE=0x7F;
PORTB=0x00;
DDRB=0xFF;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 2000.000 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 0.128 ms
ASSR=0<<AS0;
TCCR0=0x00;
TCNT0=256-2;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 16000.000 kHz
// Mode: Ph. correct PWM top=0x00FF
// OC1A output: Non-Inverted PWM
// OC1B output: Non-Inverted PWM
// OC1C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 0.031875 ms
// Output Pulse(s):
// OC1A Period: 0.031875 ms Width: 0 us
// OC1B Period: 0.031875 ms Width: 0 us
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (1<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1CH=0x00;
OCR1CL=0x00;


// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);

EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (1<<ISC41) | (0<<ISC40);
EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (1<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (1<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (0<<INTF0);

// USART0 initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
UBRR0H=0x00;
UBRR0L=0x67;

// Globally enable interrupts
#asm("sei")

while (1)
      {
        rx_data=getchar();
        
        PORTE.7=0x01;
        TCCR0=0x02;
        delay_us(10);
        PORTE.7=0x00;
        delay_ms(1);
          
        if(distance>0&&distance<8)
        {
            PORTB.0=0;
            PORTB.1=1;
            PORTB.2=1;
            PORTB.3=0;
                
            OCR1AL=0x8F;
            OCR1BL=0x8F;     
        }   
        else
        {
          switch(rx_data)
          {
            case 'S':
                
                PORTB.0=0;
                PORTB.1=0;
                PORTB.2=0;
                PORTB.3=0;
                
                OCR1AL=0x00;
                OCR1BL=0x00;
            break;
            
            case 'G':
               
                PORTB.0=1;
                PORTB.1=0;
                PORTB.2=0;
                PORTB.3=1;
                
                OCR1AL=0x5F;
                OCR1BL=0x5F;
            break;
            
            case 'L':
               
                PORTB.0=1;
                PORTB.1=0;
                PORTB.2=0;
                PORTB.3=1;
                
                OCR1AL=0xFF;
                OCR1BL=0x00;
                
            break;
            
            case 'R':
                
                PORTB.0=1;
                PORTB.1=0;
                PORTB.2=0;
                PORTB.3=1;
                
                OCR1AL=0x00;
                OCR1BL=0xFF;

            break;
            
            case 'B':
                
                PORTB.0=0;
                PORTB.1=1;
                PORTB.2=1;
                PORTB.3=0;
                
                OCR1AL=0xFF;
                OCR1BL=0xFF;
                
            break;
            
            case 'l':
                
                
                PORTB.0=0;
                PORTB.1=1;
                PORTB.2=1;
                PORTB.3=0;
                
                OCR1AL=0x00;
                OCR1BL=0xFF;

            break;
            
            case 'r':
                
                PORTB.0=0;
                PORTB.1=1;
                PORTB.2=1;
                PORTB.3=0;
                
                OCR1AL=0xFF;
                OCR1BL=0x00;

            break;   
          }
        }
      }
}